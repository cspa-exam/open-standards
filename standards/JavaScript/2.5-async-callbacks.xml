<group name="The Event Loop">
  <question id="25000">
    <body>
      After all code and callbacks run, what will be the value of `result`?

      ```js
      var result = 'A';

      setTimeout(function () {
        result += 'B';
      }, 0)

      result += 'C';
      ```
    </body>
    <choice-group>
      <choice>ABC</choice>
      <choice answer>ACB</choice>
    </choice-group>
  </question>

  <question id="25001">
    <body>
      After all code and callbacks run, what will be the value of `result`?

      ```js
      var result = 'A';
      setTimeout(function () {
        result += ' B';
      }, 1000);

      setTimeout(function () {
        result += ' C';
      }, 0);

      result += ' D';
      ```
    </body>
    <choice-group>
      <choice>`A B C D`</choice>
      <choice>`A B D C`</choice>
      <choice>`A C D B`</choice>
      <choice>`A C D B`</choice>
      <choice answer>`A D C B`</choice>
      <choice>`A D B C`</choice>
    </choice-group>
  </question>

  <question id="25002">
    <body>
      After all code and callbacks run, what will be the value of `result`?

      ```js
      var result = 'A';
      setTimeout(function () {
        result += ' B';

        setTimeout(function () {
          result += ' C';
        }, 0);
      }, 0);

      setTimeout(function () {
        result += ' D';
      }, 0);
      ```
    </body>
    <choice-group>
      <choice>`A B C D`</choice>
      <choice answer>`A B D C`</choice>
      <choice>`A C D B`</choice>
      <choice>`A C D B`</choice>
      <choice>`A D C B`</choice>
      <choice>`A D B C`</choice>
    </choice-group>
  </question>
</group>

<group name="Invocation">
  <question id="25003">
    <body>
      After all code and callbacks run, what will be the value of result?

      Pay close attention to detail.

      ```js
      var result = "A";

      function foo () {
        result += " B";
      }

      result += " C";

      setTimeout(foo, 2000);

      result += " D";
      ```
    </body>
    <choice-group>
      <choice>`A B C D`</choice>
      <choice>`A B D C`</choice>
      <choice>`A C B D`</choice>
      <choice answer>`A C D B`</choice>
      <choice>`A D B C`</choice>
      <choice>`A D C B`</choice>
    </choice-group>
  </question>

  <question id="25004">
    <body>
      After all code and callbacks run, what will be the value of result?

      Pay close attention to detail.

      ```js
      var result = "A";

      function foo () {
        result += " B";
      }

      result += " C";

      setTimeout(foo(), 2000);

      result += " D";
      ```
    </body>
    <choice-group>
      <choice>`A B C D`</choice>
      <choice>`A B D C`</choice>
      <choice answer>`A C B D`</choice>
      <choice>`A C D B`</choice>
      <choice>`A D B C`</choice>
      <choice>`A D C B`</choice>
    </choice-group>
  </question>

  <question id="25009">
    <body>
      After all code and callbacks run, what will be the value of `result`?

      ```js
      var result = 0;

      for (var i=0; i < 3; i++) {
        setTimeout(function () {
          result += i;
        }, 1234)
      }
      ```
    </body>
    <choice-group>
      <choice>0</choice>
      <choice>3</choice>
      <choice>6</choice>
      <choice answer>9</choice>
    </choice-group>
  </question>

  <question id="25010">
    <body>
      After all code and callbacks run, what will be the value of `result`?

      ```js
      var result = 0;

      for (var i=0; i < 3; i++) {
        setTimeout(function () {
          result += i;
        }, 0)
      }
      ```
    </body>
    <choice-group>
      <choice>0</choice>
      <choice>3</choice>
      <choice>6</choice>
      <choice answer>9</choice>
    </choice-group>
  </question>
</group>

<group name="Keyword this bindings">
  <question id="25006">
    <body>
      After all code and callbacks run, what will be the output of the console?

      ```js
      var alice = {
        name: "Alice",
        greet: function () {
          console.log(this.name + " says hello");
        }
      };

      setTimeout(function () {
        alice.greet();
      }, 1000)
      ```
    </body>
    <choice-group>
      <choice answer>`Alice says hello`</choice>
      <choice>`undefined says hello`</choice>
    </choice-group>
  </question>

  <question id="25007">
    <body>
      After all code and callbacks run, what will be the output of the console?

      ```js
      var alice = {
        name: "Alice",
        greet: function () {
          console.log(this.name + " says hello");
        }
      };

      setTimeout(alice.greet, 1000)
      ```
    </body>
    <choice-group>
      <choice>`Alice says hello`</choice>
      <choice answer>`undefined says hello`</choice>
    </choice-group>
  </question>

  <question id="25008">
    <body>
      After all code and callbacks run, what will be the output of the console?

      ```js
      var alice = {
        name: "Alice",
        greet: function () {
          console.log(this.name + " says hello");
        }
      };

      setTimeout(alice.greet.bind(alice), 1000)
      ```
    </body>
    <choice-group>
      <choice answer>`Alice says hello`</choice>
      <choice>`undefined says hello`</choice>
    </choice-group>
  </question>
</group>

<group name="Advanced Patterns">
  <question type="short-coding" id="25005">
    <body>
      You have access to a function `getHobbies` which takes two parameters:

      1. A target username (as a string)
      2. A callback

      `getHobbies` asynchronously calls *your* callback with *an array of strings*, where
      each string represents a hobby of that user.

      Write an callback style function `getAllHobbies` that takes two parameters:

      1. A list of usernames (as an array of strings)
      2. A callback

      and returns a *sorted* array of **all** hobbies from **all** given users.

      ### Example

      - `"user_1"` has hobbies `"a"` and `"b"`
      - `"user_2"` has hobbies `"x"` and `"y"`
      - `"user_3"` has hobby `"h"`

      Then the following code...

      ```js
      getAllHobbies(["user_1", "user_2", "user_3"], function (results) {
        console.log("Results:", results)
      })
      ```

      ...should output this to the console:

      ```js
      Results: ["a", "b", "h", "x", "y"]
      ```
    </body>

    <given-code>
      function getAllHobbies (usernames, callback) {
        // Complete me
      };
    </given-code>
    <test-setup>
      var hobbies = {
        user_1: ['a','b'],
        user_2: ['x','y'],
        user_3: ['h'],
        user_4: ['d','c','k','j'],
        user_5: [],
      };
      function getHobbies (username, cb) {
        setTimeout(function () {
          cb(hobbies[username])
        }, Math.round(Math.random() * 3))
      }
    </test-setup>
    <test>
      getAllHobbies(["user_1", "user_2", "user_3"], (results) => {
        assert.deepEqual(results, ["a", "b", "h", "x", "y"]);
        assert.pass();
      });
    </test>
    <test>
      getAllHobbies(["user_4", "user_3"], (results) => {
        assert.deepEqual(results, ["c", "d", "h", "j", "k"]);
        assert.pass();
      });
    </test>
    <test title="With a single user">
      getAllHobbies(["user_4"], (results) => {
        assert.deepEqual(results, ["c", "d", "j", "k"]);
        assert.pass();
      });
    </test>
    <test title="With a hobby-less user">
      getAllHobbies(["user_2", "user_5"], (results) => {
        assert.deepEqual(results, ["x", "y"]);
        assert.pass();
      });
    </test>
    <test title="With only a hobby-less user">
      getAllHobbies(["user_5"], (results) => {
        assert.deepEqual(results, []);
        assert.pass();
      });
    </test>
  </question>
</group>
